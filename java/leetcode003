import java.util.HashMap;
import java.util.Map;

public class leetcode003 {
      class Point {
          int x;
          int y;

          Point() {
              x = 0;
              y = 0;
          }

          Point(int a, int b) {
              x = a;
              y = b;
          }
      }
      //每次假定一个点在该直线中，求对应直线的点数，
    //具体如何求需要用到map和最简分数，用最简分数而不是直接求商的原因是
    //避免因为小数省略而误认为斜率相等
    class Solution {
           public int maxPoints(Point[] points){
               if(points==null) return 0;
               if(points.length<=2) return points.length;
               Map<Map,Integer> map=new HashMap<>();
               int result=0;
               for(int i=0;i<points.length;i++){
                   map.clear();
                   int dup=1;
                   int max=0;
                   //这里为什么从i+1开始算起，因为，如果还要计算i之前的点k1,k2...，那么在计算k1时其实已经计算过这种情况了
                   //我们这里假设，目标直线过点i并且不会经过点i之前的点
                   for(int j=i+1;j<points.length;j++){
                      int detaX=points[j].x-points[i].x;
                      int detaY=points[j].y-points[i].y;
                      if(detaX==0&&detaY==0){
                          dup++;continue;
                      }
                      int g=getGongYue(detaX,detaY);
                      Map<Integer,Integer> m=new HashMap<>();
                      m.put(detaX/g,detaY/g);
                      map.put(m,map.getOrDefault(m,0)+1);
                      max=Math.max(max,map.get(m));
                   }
                   result=Math.max(max+dup,result);
               }
               return result;
           }

          private int getGongYue(int detaX, int detaY) {
               //这里用到了求最大公约数的辗转相除法
              // detaY与detaX的位置不能颠倒
              // detaY与detaX%detaY的位置不能颠倒
               return detaY==0?detaX:getGongYue(detaY,detaX%detaY);
          }
      }

}
