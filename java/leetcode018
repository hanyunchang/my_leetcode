import java.util.*;

public class leetcode018 {
    //给出一个字符串s，分割s使得分割出的每一个子串都是回文串
    //计算将字符串s分割成回文分割结果的最小切割数
    //例如:给定字符串s="aab",
    //返回1，因为回文分割结果["aa","b"]是切割一次生成的。


//解题思路：动态规划问题。
//  dp[i] - 表示子串（0，i）的最小回文切割，则最优解在dp[s.length-1]中。
// 分几种情况：
//  1.初始化：当字串s.substring(0,i+1)(包括i位置的字符)是回文时，dp[i] = 0(表示不需要分割)；否则，dp[i] = i（表示至多分割i次）;
//  2.对于任意大于1的i，如果s.substring(j,i+1)(j<=i,即遍历i之前的每个子串)是回文时，dp[i] = min(dp[i], dp[j-1]+1);
//  3.如果s.substring(j,i+1)(j<=i)不是回文时，dp[i] = min(dp[i],dp[j-1]+i+1-j);
    public int minCut(String s) {
        int[] dp=new int[s.length()];
        for(int i=0;i<s.length();i++){//考虑s[i]
            dp[i]=isOK(s.substring(0,i+1))?0:i;
            if(dp[i]==0) continue;
            for(int j=1;j<=i;j++){
                if(isOK(s.substring(j,i+1))){
                    dp[i]=Math.min(dp[i],dp[j-1]+1);
                }else{
                    //2023,07,19,hyc:这行可以去掉，多余的，可以证明。只要这样理解就好，就是dp[i]等于min{dp[最近一次分割点的下标] + 1}
                    dp[i]=Math.min(dp[i],dp[j-1]+i-(j-1));//可以用反证法证明，此时把j-1到i看成最坏情况求得的解是正确的。
                }
            }
        }
        return dp[s.length()-1];
    }

    private boolean isOK(String str){
        char[] arr=str.toCharArray();
        int s=0,e=arr.length-1;
        while(s<=e){
            if(arr[s]!=arr[e]) return false;
            s++;e--;
        }
        return true;
    }


}
