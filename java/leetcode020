public class leetcode020 {
    //现在有一个仅包含‘X’和‘O’的二维板，请捕获所有的被‘X’包围的区域
    //捕获一个被包围区域的方法是将被包围区域中的所有‘O’变成‘X’
    //例如
    //X X X X↵X O O X↵X X O X↵X O X X
    //执行完你给出的函数以后，这个二维板应该变成：
    //X X X X↵X X X X↵X X X X↵X O X X


    public void solve(char[][] board){
        if(board==null||board.length==0||(board.length==1&&board[0].length==0))
            return ;
        int row=0,col=0;
        while(col<board[0].length){
            if(board[row][col]=='O')
                DFS(board,row,col);
            col++;
        }
        col--;
        while(row<board.length){
            if(board[row][col]=='O')
                DFS(board,row,col);
            row++;
        }
        row--;
        while(col>=0){
            if(board[row][col]=='O')
                DFS(board,row,col);
            col--;
        }
        col++;
        while(row>=0){
            if(board[row][col]=='O')
                DFS(board,row,col);
            row--;
        }
        for(int i=0;i<board.length;i++){
            for(int j=0;j<board[0].length;j++){
                if(board[i][j]=='O')
                    board[i][j]='X';
                else if(board[i][j]=='#')
                    board[i][j]='O';
            }
        }
    }

    private void DFS(char[][] board, int row, int col) {
        if(row<0||row>=board.length||col<0||col>=board[row].length||board[row][col]!='O')
            return ;
        board[row][col]='#';
        DFS(board,row-1,col);
        DFS(board,row+1,col);
        DFS(board,row,col-1);
        DFS(board,row,col+1);
    }
        public static void main(String[] args) {
        leetcode020 obj=new leetcode020();
        char[][] board={{'O'}};
        obj.solve(board);
    }
    //1.遍历所有节点，遇到‘O’，如果记录为opened则不再进行判定
    //2. 对于判定的‘O’ 成功了则置为‘X’ 失败记录为opened
    //3. 如何判断‘O’,递归进行，深度优先遍历
//    public void solve(char[][] board) {
//        if (board == null || board.length == 0 || (board.length == 1 && board[0].length == 0))
//            return;
//        boolean[][] opened = getarr(board);
//        boolean[][] visited = getarr(board);
//        for (int i = 0; i < board.length; i++) {
//            for (int j = 0; j < board[i].length; j++) {
//                if (opened[i][j]==false&&DFS(board, i, j, opened, visited)) {
//                   DFSSet(board,i,j);
//                }
//            }
//        }
//    }
//
//    private void DFSSet(char[][] board, int i, int j) {
//        if(i<0||i>=board.length||j<0||j>=board[i].length||board[i][j]=='X') return ;
//        board[i][j]='X';
//        DFSSet(board,i-1,j);
//        DFSSet(board,i+1,j);
//        DFSSet(board,i,j-1);
//        DFSSet(board,i,j+1);
//    }
//
//    private boolean DFS(char[][] board, int i, int j, boolean[][] opened, boolean[][] visited) {
//        if(i<0||i>=board.length||j<0||j>=board[i].length) return false;
//        if(board[i][j]=='X') return true;
//        visited[i][j]=true;opened[i][j]=true;
//        boolean res=(hasVisited(visited,i-1,j,board)||DFS(board,i-1,j,opened,visited))&&
//                (hasVisited(visited,i+1,j,board)||DFS(board,i+1,j,opened,visited))&&
//                (hasVisited(visited,i,j-1,board)||DFS(board,i,j-1,opened,visited))&&
//                (hasVisited(visited,i,j+1,board)||DFS(board,i,j+1,opened,visited));
//        visited[i][j]=false;//回溯
//        return res;//中间状态的res为true未必真的为true
//    }
//
//
//    private boolean hasVisited(boolean[][] visited, int i, int j, char[][] board) {
//        if(i<0||i>=board.length||j<0||j>=board[i].length) return false;
//        return visited[i][j];
//    }
//
//    private boolean[][] getarr(char[][] board) {
//        boolean[][] arr=new boolean[board.length][];
//        for(int i=0;i<board.length;i++){
//            arr[i]=new boolean[board[i].length];
//        }
//        return arr;
//    }
//
//    public static void main(String[] args) {
//        leetcode020 obj=new leetcode020();
//        char[][] board={{'O'}};
//        obj.solve(board);
//    }

}
