import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Queue;

public class leetcode047 {
    public class TreeNode {
        int val;
        TreeNode left;
        TreeNode right;
        TreeNode(int x) { val = x; }
    }
    //判断二叉树是否是对称的 即左右子树互为镜像
    //什么叫做两个子树互为镜像呢
    //A树的右子树和B树的左子树 A树的左子树和B树的右子树 互为镜像 A的root==B的root

    //牛客网的解法 迭代
    public boolean isSymmetric(TreeNode root) {
        if(root==null) return true;
        Queue<TreeNode> queue=new LinkedList<>();
        if(root.left==null||root.right==null)
            return root.left==root.right;
        queue.add(root.left);
        queue.add(root.right);
        while(!queue.isEmpty()){
            int size=queue.size();
            while(size>0){
                TreeNode left=queue.poll();
                TreeNode right=queue.poll();
                size-=2;
                if(left==null&&right==null) continue;
                if(left==null||right==null||left.val!=right.val) return false;
                queue.add(left.left);
                queue.add(right.right);
                queue.add(left.right);
                queue.add(right.left);
            }
        }
        return true;
    }
    //我的解法 递归
    public boolean isSymmetric_(TreeNode root) {
       if(root==null) return true;
       return judge(root.left,root.right);
    }

    private boolean judge(TreeNode left, TreeNode right) {
        if(left==null&&right==null) return true;
        if(left==null||right==null) return false;
        return left.val==right.val&&judge(left.left,right.right)&&judge(left.right,right.left);
    }


}
