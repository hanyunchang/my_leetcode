public class leetcode051 {
    //给出三个字符串s1, s2, s3,判断s3是否可以由s1和s2交织而成。
    //例如：
    //给定
    //s1 ="aabcc",
    //s2 ="dbbca",
    //如果s3 ="aadbbcbcac", 返回true
    //如果s3 ="aadbbbaccc", 返回false

    //要用到dp状态方程
    //dp[i][j]：0-i 与 0-j 的字符能否 交织成 0-（i+j）   [描述：前开后闭]
    //dp[i][j]=dp[i-1][j]&condition || dp[i][j-1]&condition
    public boolean isInterleave(String s1, String s2, String s3) {
        if(s1.length()+s2.length()!=s3.length()) return false;
         boolean[][] dp=new boolean[s1.length()+1][s2.length()+1];
        dp[0][0]=true;//这一步不能少
        for(int i=1;i<=s1.length();i++)
            dp[i][0]=dp[i-1][0]&&(s1.charAt(i-1)==s3.charAt(i-1));
        for(int i=1;i<=s2.length();i++)
            dp[0][i]=dp[0][i-1]&&(s2.charAt(i-1)==s3.charAt(i-1));
        for(int i=1;i<=s1.length();i++){
            for(int j=1;j<=s2.length();j++){
                dp[i][j]=(dp[i-1][j]&&s1.charAt(i-1)==s3.charAt(i+j-1))||
                        (dp[i][j-1]&&s2.charAt(j-1)==s3.charAt(i+j-1));
            }
        }
        return dp[s1.length()][s2.length()];
    }
}
