import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Stack;

public class leetcode054 {
    public class TreeNode {
        int val;
        TreeNode left;
        TreeNode right;
        TreeNode(int x) { val = x; }
    }
    //牛客网思路 中序遍历 利用一个Stack和一个node指针
    //https://www.nowcoder.com/profile/167707/codeBookDetail?submissionId=15819737  作者：JacobGo！
    public ArrayList<Integer> inorderTraversal(TreeNode root) {
       ArrayList<Integer> res=new ArrayList<>();
       if(root==null) return res;
       Stack<TreeNode> stack=new Stack<>();
       TreeNode node=root;
       while(!stack.isEmpty()||node!=null){
           while(node!=null){
               stack.push(node);
               node=node.left;
           }
           node=stack.pop();
           res.add(node.val);
           node=node.right;
       }
       return res;
    }


    //我这种解法只适用于前序或者后序
    public ArrayList<Integer> inorderTraversal_(TreeNode root) {
        ArrayList<Integer> res=new ArrayList<>();
        if(root==null)  return res;
        Stack<TreeNode> stack=new Stack<>();
        stack.push(root);
        while(stack.isEmpty()==false){
            TreeNode node=stack.pop();
            res.add(node.val);
            if(node.right!=null) stack.push(node.right);
            if(node.left!=null) stack.push(node.left);
        }
        return res;
    }
}
